/* tslint:disable */
/* eslint-disable */
/**
 * TrainingPlan.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface AthleteDTO
 */
export interface AthleteDTO {
  /**
   *
   * @type {number}
   * @memberof AthleteDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  birth?: string;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  phone?: string | null;
  /**
   *
   * @type {string}
   * @memberof AthleteDTO
   */
  type?: string | null;
}
/**
 *
 * @export
 * @interface AthletesPagedListDTO
 */
export interface AthletesPagedListDTO {
  /**
   *
   * @type {number}
   * @memberof AthletesPagedListDTO
   */
  total?: number;
  /**
   *
   * @type {Array<AthleteDTO>}
   * @memberof AthletesPagedListDTO
   */
  items?: Array<AthleteDTO> | null;
}
/**
 *
 * @export
 * @interface CommentDTO
 */
export interface CommentDTO {
  /**
   *
   * @type {number}
   * @memberof CommentDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CommentDTO
   */
  personName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CommentDTO
   */
  personType?: string | null;
  /**
   *
   * @type {string}
   * @memberof CommentDTO
   */
  text?: string | null;
  /**
   *
   * @type {string}
   * @memberof CommentDTO
   */
  modifiedAt?: string;
}
/**
 *
 * @export
 * @interface ContentDTO
 */
export interface ContentDTO {
  /**
   *
   * @type {number}
   * @memberof ContentDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ContentDTO
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof ContentDTO
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof ContentDTO
   */
  data?: string | null;
  /**
   *
   * @type {string}
   * @memberof ContentDTO
   */
  type?: string | null;
}
/**
 *
 * @export
 * @interface ContentsPagedListDTO
 */
export interface ContentsPagedListDTO {
  /**
   *
   * @type {number}
   * @memberof ContentsPagedListDTO
   */
  total?: number;
  /**
   *
   * @type {Array<ContentDTO>}
   * @memberof ContentsPagedListDTO
   */
  items?: Array<ContentDTO> | null;
}
/**
 *
 * @export
 * @interface CreateAthleteRequest
 */
export interface CreateAthleteRequest {
  /**
   *
   * @type {string}
   * @memberof CreateAthleteRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateAthleteRequest
   */
  password?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateAthleteRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateAthleteRequest
   */
  birth?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAthleteRequest
   */
  phone?: string | null;
}
/**
 *
 * @export
 * @interface CreateAthleteResponse
 */
export interface CreateAthleteResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreateAthleteResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreateAthleteResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreateAthleteResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface CreateContentRequest
 */
export interface CreateContentRequest {
  /**
   *
   * @type {string}
   * @memberof CreateContentRequest
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateContentRequest
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateContentRequest
   */
  type?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateContentRequest
   */
  data?: string | null;
}
/**
 *
 * @export
 * @interface CreateContentResponse
 */
export interface CreateContentResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreateContentResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreateContentResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreateContentResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface CreateInstructorRequest
 */
export interface CreateInstructorRequest {
  /**
   *
   * @type {string}
   * @memberof CreateInstructorRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateInstructorRequest
   */
  password?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateInstructorRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateInstructorRequest
   */
  birth?: string;
  /**
   *
   * @type {string}
   * @memberof CreateInstructorRequest
   */
  phone?: string | null;
}
/**
 *
 * @export
 * @interface CreateInstructorResponse
 */
export interface CreateInstructorResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreateInstructorResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreateInstructorResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreateInstructorResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface CreatePlanRequest
 */
export interface CreatePlanRequest {
  /**
   *
   * @type {string}
   * @memberof CreatePlanRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreatePlanRequest
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreatePlanRequest
   */
  goal?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreatePlanRequest
   */
  athleteId?: number;
  /**
   *
   * @type {number}
   * @memberof CreatePlanRequest
   */
  instructorId?: number;
}
/**
 *
 * @export
 * @interface CreatePlanResponse
 */
export interface CreatePlanResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreatePlanResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreatePlanResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreatePlanResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface CreateTeamRequest
 */
export interface CreateTeamRequest {
  /**
   *
   * @type {string}
   * @memberof CreateTeamRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateTeamRequest
   */
  email?: string | null;
}
/**
 *
 * @export
 * @interface CreateTeamResponse
 */
export interface CreateTeamResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreateTeamResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreateTeamResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreateTeamResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface CreateWorkoutCommentRequest
 */
export interface CreateWorkoutCommentRequest {
  /**
   *
   * @type {number}
   * @memberof CreateWorkoutCommentRequest
   */
  personId?: number;
  /**
   *
   * @type {string}
   * @memberof CreateWorkoutCommentRequest
   */
  text?: string | null;
}
/**
 *
 * @export
 * @interface CreateWorkoutRequest
 */
export interface CreateWorkoutRequest {
  /**
   *
   * @type {number}
   * @memberof CreateWorkoutRequest
   */
  planId?: number;
  /**
   *
   * @type {string}
   * @memberof CreateWorkoutRequest
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof CreateWorkoutRequest
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateWorkoutRequest
   */
  contentId?: number | null;
}
/**
 *
 * @export
 * @interface CreateWorkoutResponse
 */
export interface CreateWorkoutResponse {
  /**
   *
   * @type {boolean}
   * @memberof CreateWorkoutResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof CreateWorkoutResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof CreateWorkoutResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface DeleteSocialMediaRequest
 */
export interface DeleteSocialMediaRequest {
  /**
   *
   * @type {string}
   * @memberof DeleteSocialMediaRequest
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface DeleteTeamSocialMediaResponse
 */
export interface DeleteTeamSocialMediaResponse {
  /**
   *
   * @type {boolean}
   * @memberof DeleteTeamSocialMediaResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof DeleteTeamSocialMediaResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof DeleteTeamSocialMediaResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface InstructorDTO
 */
export interface InstructorDTO {
  /**
   *
   * @type {number}
   * @memberof InstructorDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  birth?: string;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  phone?: string | null;
  /**
   *
   * @type {string}
   * @memberof InstructorDTO
   */
  type?: string | null;
}
/**
 *
 * @export
 * @interface InstructorsPagedListDTO
 */
export interface InstructorsPagedListDTO {
  /**
   *
   * @type {number}
   * @memberof InstructorsPagedListDTO
   */
  total?: number;
  /**
   *
   * @type {Array<InstructorDTO>}
   * @memberof InstructorsPagedListDTO
   */
  items?: Array<InstructorDTO> | null;
}
/**
 *
 * @export
 * @interface PlanDTO
 */
export interface PlanDTO {
  /**
   *
   * @type {number}
   * @memberof PlanDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PlanDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof PlanDTO
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof PlanDTO
   */
  goal?: string | null;
  /**
   *
   * @type {number}
   * @memberof PlanDTO
   */
  instructorId?: number;
  /**
   *
   * @type {InstructorDTO}
   * @memberof PlanDTO
   */
  instructor?: InstructorDTO;
  /**
   *
   * @type {Array<WorkoutDTO>}
   * @memberof PlanDTO
   */
  workouts?: Array<WorkoutDTO> | null;
}
/**
 *
 * @export
 * @interface SaveSocialMediaRequest
 */
export interface SaveSocialMediaRequest {
  /**
   *
   * @type {string}
   * @memberof SaveSocialMediaRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof SaveSocialMediaRequest
   */
  account?: string | null;
}
/**
 *
 * @export
 * @interface SaveTeamSettingsResponse
 */
export interface SaveTeamSettingsResponse {
  /**
   *
   * @type {boolean}
   * @memberof SaveTeamSettingsResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof SaveTeamSettingsResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof SaveTeamSettingsResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface SaveTeamSocialMediaResponse
 */
export interface SaveTeamSocialMediaResponse {
  /**
   *
   * @type {boolean}
   * @memberof SaveTeamSocialMediaResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof SaveTeamSocialMediaResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof SaveTeamSocialMediaResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface SocialMediaDTO
 */
export interface SocialMediaDTO {
  /**
   *
   * @type {string}
   * @memberof SocialMediaDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof SocialMediaDTO
   */
  account?: string | null;
}
/**
 *
 * @export
 * @interface TeamDTO
 */
export interface TeamDTO {
  /**
   *
   * @type {number}
   * @memberof TeamDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof TeamDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamDTO
   */
  email?: string | null;
  /**
   *
   * @type {Array<TeamSettingsDTO>}
   * @memberof TeamDTO
   */
  teamSettings?: Array<TeamSettingsDTO> | null;
  /**
   *
   * @type {Array<SocialMediaDTO>}
   * @memberof TeamDTO
   */
  socialsMedia?: Array<SocialMediaDTO> | null;
}
/**
 *
 * @export
 * @interface TeamSettingsDTO
 */
export interface TeamSettingsDTO {
  /**
   *
   * @type {string}
   * @memberof TeamSettingsDTO
   */
  key?: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamSettingsDTO
   */
  value?: string | null;
}
/**
 *
 * @export
 * @interface UpdateAthleteRequest
 */
export interface UpdateAthleteRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateAthleteRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateAthleteRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAthleteRequest
   */
  birth?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAthleteRequest
   */
  phone?: string | null;
}
/**
 *
 * @export
 * @interface UpdateAthleteResponse
 */
export interface UpdateAthleteResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdateAthleteResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdateAthleteResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdateAthleteResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface UpdateCommentRequest
 */
export interface UpdateCommentRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCommentRequest
   */
  text?: string | null;
}
/**
 *
 * @export
 * @interface UpdateContentRequest
 */
export interface UpdateContentRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateContentRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateContentRequest
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateContentRequest
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateContentRequest
   */
  type?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateContentRequest
   */
  data?: string | null;
}
/**
 *
 * @export
 * @interface UpdateContentResponse
 */
export interface UpdateContentResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdateContentResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdateContentResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdateContentResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface UpdateInstructorRequest
 */
export interface UpdateInstructorRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateInstructorRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateInstructorRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateInstructorRequest
   */
  birth?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateInstructorRequest
   */
  phone?: string | null;
}
/**
 *
 * @export
 * @interface UpdateInstructorResponse
 */
export interface UpdateInstructorResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdateInstructorResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdateInstructorResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdateInstructorResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface UpdatePlanRequest
 */
export interface UpdatePlanRequest {
  /**
   *
   * @type {number}
   * @memberof UpdatePlanRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdatePlanRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdatePlanRequest
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdatePlanRequest
   */
  goal?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdatePlanRequest
   */
  instructorId?: number;
}
/**
 *
 * @export
 * @interface UpdatePlanResponse
 */
export interface UpdatePlanResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdatePlanResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdatePlanResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdatePlanResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface UpdateTeamRequest
 */
export interface UpdateTeamRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateTeamRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateTeamRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateTeamRequest
   */
  email?: string | null;
}
/**
 *
 * @export
 * @interface UpdateTeamResponse
 */
export interface UpdateTeamResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdateTeamResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdateTeamResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdateTeamResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface UpdateWorkoutRequest
 */
export interface UpdateWorkoutRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateWorkoutRequest
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateWorkoutRequest
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateWorkoutRequest
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateWorkoutRequest
   */
  contentId?: number | null;
}
/**
 *
 * @export
 * @interface UpdateWorkoutResponse
 */
export interface UpdateWorkoutResponse {
  /**
   *
   * @type {boolean}
   * @memberof UpdateWorkoutResponse
   */
  success?: boolean;
  /**
   *
   * @type {any}
   * @memberof UpdateWorkoutResponse
   */
  message?: any | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof UpdateWorkoutResponse
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface WorkoutDTO
 */
export interface WorkoutDTO {
  /**
   *
   * @type {number}
   * @memberof WorkoutDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof WorkoutDTO
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof WorkoutDTO
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof WorkoutDTO
   */
  contentId?: number | null;
  /**
   *
   * @type {ContentDTO}
   * @memberof WorkoutDTO
   */
  content?: ContentDTO;
  /**
   *
   * @type {Array<CommentDTO>}
   * @memberof WorkoutDTO
   */
  comments?: Array<CommentDTO> | null;
}

/**
 * AthletesApi - axios parameter creator
 * @export
 */
export const AthletesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesGet: async (
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Athletes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      if (pageSize != null) {
        localVarHeaderParameter['pageSize'] =
          typeof pageSize === 'string' ? pageSize : JSON.stringify(pageSize);
      }

      if (lastId != null) {
        localVarHeaderParameter['lastId'] =
          typeof lastId === 'string' ? lastId : JSON.stringify(lastId);
      }

      if (direction != null) {
        localVarHeaderParameter['direction'] = String(direction);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAthletesIdGet', 'id', id);
      const localVarPath = `/api/Athletes/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateAthleteRequest} [createAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesPost: async (
      createAthleteRequest?: CreateAthleteRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Athletes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAthleteRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateAthleteRequest} [updateAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesPut: async (
      updateAthleteRequest?: UpdateAthleteRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Athletes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAthleteRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AthletesApi - functional programming interface
 * @export
 */
export const AthletesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AthletesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAthletesGet(
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AthletesPagedListDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAthletesGet(
        name,
        pageSize,
        lastId,
        direction,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AthletesApi.apiAthletesGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAthletesIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AthleteDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAthletesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AthletesApi.apiAthletesIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateAthleteRequest} [createAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAthletesPost(
      createAthleteRequest?: CreateAthleteRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateAthleteResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAthletesPost(
        createAthleteRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AthletesApi.apiAthletesPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateAthleteRequest} [updateAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAthletesPut(
      updateAthleteRequest?: UpdateAthleteRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateAthleteResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAthletesPut(
        updateAthleteRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AthletesApi.apiAthletesPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AthletesApi - factory interface
 * @export
 */
export const AthletesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AthletesApiFp(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesGet(
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AthletesPagedListDTO> {
      return localVarFp
        .apiAthletesGet(name, pageSize, lastId, direction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AthleteDTO> {
      return localVarFp
        .apiAthletesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateAthleteRequest} [createAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesPost(
      createAthleteRequest?: CreateAthleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateAthleteResponse> {
      return localVarFp
        .apiAthletesPost(createAthleteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateAthleteRequest} [updateAthleteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAthletesPut(
      updateAthleteRequest?: UpdateAthleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateAthleteResponse> {
      return localVarFp
        .apiAthletesPut(updateAthleteRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AthletesApi - object-oriented interface
 * @export
 * @class AthletesApi
 * @extends {BaseAPI}
 */
export class AthletesApi extends BaseAPI {
  /**
   *
   * @param {string} [name]
   * @param {number} [pageSize]
   * @param {number} [lastId]
   * @param {string} [direction]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AthletesApi
   */
  public apiAthletesGet(
    name?: string,
    pageSize?: number,
    lastId?: number,
    direction?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AthletesApiFp(this.configuration)
      .apiAthletesGet(name, pageSize, lastId, direction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AthletesApi
   */
  public apiAthletesIdGet(id: number, options?: RawAxiosRequestConfig) {
    return AthletesApiFp(this.configuration)
      .apiAthletesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateAthleteRequest} [createAthleteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AthletesApi
   */
  public apiAthletesPost(
    createAthleteRequest?: CreateAthleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AthletesApiFp(this.configuration)
      .apiAthletesPost(createAthleteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateAthleteRequest} [updateAthleteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AthletesApi
   */
  public apiAthletesPut(
    updateAthleteRequest?: UpdateAthleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AthletesApiFp(this.configuration)
      .apiAthletesPut(updateAthleteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ContentsApi - axios parameter creator
 * @export
 */
export const ContentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [title]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsGet: async (
      title?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Contents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (title !== undefined) {
        localVarQueryParameter['title'] = title;
      }

      if (pageSize != null) {
        localVarHeaderParameter['pageSize'] =
          typeof pageSize === 'string' ? pageSize : JSON.stringify(pageSize);
      }

      if (lastId != null) {
        localVarHeaderParameter['lastId'] =
          typeof lastId === 'string' ? lastId : JSON.stringify(lastId);
      }

      if (direction != null) {
        localVarHeaderParameter['direction'] = String(direction);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiContentsIdGet', 'id', id);
      const localVarPath = `/api/Contents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateContentRequest} [createContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsPost: async (
      createContentRequest?: CreateContentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Contents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createContentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateContentRequest} [updateContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsPut: async (
      updateContentRequest?: UpdateContentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Contents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateContentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContentsApi - functional programming interface
 * @export
 */
export const ContentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ContentsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [title]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiContentsGet(
      title?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContentsPagedListDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentsGet(
        title,
        pageSize,
        lastId,
        direction,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ContentsApi.apiContentsGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiContentsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiContentsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ContentsApi.apiContentsIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateContentRequest} [createContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiContentsPost(
      createContentRequest?: CreateContentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateContentResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentsPost(
        createContentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ContentsApi.apiContentsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateContentRequest} [updateContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiContentsPut(
      updateContentRequest?: UpdateContentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateContentResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentsPut(
        updateContentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ContentsApi.apiContentsPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ContentsApi - factory interface
 * @export
 */
export const ContentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContentsApiFp(configuration);
  return {
    /**
     *
     * @param {string} [title]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsGet(
      title?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ContentsPagedListDTO> {
      return localVarFp
        .apiContentsGet(title, pageSize, lastId, direction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ContentDTO> {
      return localVarFp
        .apiContentsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateContentRequest} [createContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsPost(
      createContentRequest?: CreateContentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateContentResponse> {
      return localVarFp
        .apiContentsPost(createContentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateContentRequest} [updateContentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiContentsPut(
      updateContentRequest?: UpdateContentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateContentResponse> {
      return localVarFp
        .apiContentsPut(updateContentRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContentsApi - object-oriented interface
 * @export
 * @class ContentsApi
 * @extends {BaseAPI}
 */
export class ContentsApi extends BaseAPI {
  /**
   *
   * @param {string} [title]
   * @param {number} [pageSize]
   * @param {number} [lastId]
   * @param {string} [direction]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public apiContentsGet(
    title?: string,
    pageSize?: number,
    lastId?: number,
    direction?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ContentsApiFp(this.configuration)
      .apiContentsGet(title, pageSize, lastId, direction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public apiContentsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return ContentsApiFp(this.configuration)
      .apiContentsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateContentRequest} [createContentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public apiContentsPost(
    createContentRequest?: CreateContentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ContentsApiFp(this.configuration)
      .apiContentsPost(createContentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateContentRequest} [updateContentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public apiContentsPut(
    updateContentRequest?: UpdateContentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ContentsApiFp(this.configuration)
      .apiContentsPut(updateContentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * InstructorsApi - axios parameter creator
 * @export
 */
export const InstructorsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsGet: async (
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Instructors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      if (pageSize != null) {
        localVarHeaderParameter['pageSize'] =
          typeof pageSize === 'string' ? pageSize : JSON.stringify(pageSize);
      }

      if (lastId != null) {
        localVarHeaderParameter['lastId'] =
          typeof lastId === 'string' ? lastId : JSON.stringify(lastId);
      }

      if (direction != null) {
        localVarHeaderParameter['direction'] = String(direction);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiInstructorsIdGet', 'id', id);
      const localVarPath = `/api/Instructors/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateInstructorRequest} [createInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsPost: async (
      createInstructorRequest?: CreateInstructorRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Instructors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createInstructorRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateInstructorRequest} [updateInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsPut: async (
      updateInstructorRequest?: UpdateInstructorRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Instructors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateInstructorRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InstructorsApi - functional programming interface
 * @export
 */
export const InstructorsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    InstructorsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiInstructorsGet(
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InstructorsPagedListDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiInstructorsGet(
          name,
          pageSize,
          lastId,
          direction,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InstructorsApi.apiInstructorsGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiInstructorsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstructorDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiInstructorsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InstructorsApi.apiInstructorsIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateInstructorRequest} [createInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiInstructorsPost(
      createInstructorRequest?: CreateInstructorRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateInstructorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiInstructorsPost(
          createInstructorRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InstructorsApi.apiInstructorsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateInstructorRequest} [updateInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiInstructorsPut(
      updateInstructorRequest?: UpdateInstructorRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateInstructorResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiInstructorsPut(
          updateInstructorRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['InstructorsApi.apiInstructorsPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * InstructorsApi - factory interface
 * @export
 */
export const InstructorsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InstructorsApiFp(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsGet(
      name?: string,
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<InstructorsPagedListDTO> {
      return localVarFp
        .apiInstructorsGet(name, pageSize, lastId, direction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<InstructorDTO> {
      return localVarFp
        .apiInstructorsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateInstructorRequest} [createInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsPost(
      createInstructorRequest?: CreateInstructorRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateInstructorResponse> {
      return localVarFp
        .apiInstructorsPost(createInstructorRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateInstructorRequest} [updateInstructorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiInstructorsPut(
      updateInstructorRequest?: UpdateInstructorRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateInstructorResponse> {
      return localVarFp
        .apiInstructorsPut(updateInstructorRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InstructorsApi - object-oriented interface
 * @export
 * @class InstructorsApi
 * @extends {BaseAPI}
 */
export class InstructorsApi extends BaseAPI {
  /**
   *
   * @param {string} [name]
   * @param {number} [pageSize]
   * @param {number} [lastId]
   * @param {string} [direction]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstructorsApi
   */
  public apiInstructorsGet(
    name?: string,
    pageSize?: number,
    lastId?: number,
    direction?: string,
    options?: RawAxiosRequestConfig
  ) {
    return InstructorsApiFp(this.configuration)
      .apiInstructorsGet(name, pageSize, lastId, direction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstructorsApi
   */
  public apiInstructorsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return InstructorsApiFp(this.configuration)
      .apiInstructorsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateInstructorRequest} [createInstructorRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstructorsApi
   */
  public apiInstructorsPost(
    createInstructorRequest?: CreateInstructorRequest,
    options?: RawAxiosRequestConfig
  ) {
    return InstructorsApiFp(this.configuration)
      .apiInstructorsPost(createInstructorRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateInstructorRequest} [updateInstructorRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InstructorsApi
   */
  public apiInstructorsPut(
    updateInstructorRequest?: UpdateInstructorRequest,
    options?: RawAxiosRequestConfig
  ) {
    return InstructorsApiFp(this.configuration)
      .apiInstructorsPut(updateInstructorRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PlansApi - axios parameter creator
 * @export
 */
export const PlansApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} athleteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansAthleteAthleteIdGet: async (
      athleteId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'athleteId' is not null or undefined
      assertParamExists('apiPlansAthleteAthleteIdGet', 'athleteId', athleteId);
      const localVarPath = `/api/Plans/athlete/{athleteId}`.replace(
        `{${'athleteId'}}`,
        encodeURIComponent(String(athleteId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansGet: async (
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Plans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageSize != null) {
        localVarHeaderParameter['pageSize'] =
          typeof pageSize === 'string' ? pageSize : JSON.stringify(pageSize);
      }

      if (lastId != null) {
        localVarHeaderParameter['lastId'] =
          typeof lastId === 'string' ? lastId : JSON.stringify(lastId);
      }

      if (direction != null) {
        localVarHeaderParameter['direction'] = String(direction);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreatePlanRequest} [createPlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansPost: async (
      createPlanRequest?: CreatePlanRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Plans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPlanRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdatePlanRequest} [updatePlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansPut: async (
      updatePlanRequest?: UpdatePlanRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Plans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePlanRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlansApi - functional programming interface
 * @export
 */
export const PlansApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlansApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} athleteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlansAthleteAthleteIdGet(
      athleteId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPlansAthleteAthleteIdGet(
          athleteId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlansApi.apiPlansAthleteAthleteIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlansGet(
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlansGet(
        pageSize,
        lastId,
        direction,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlansApi.apiPlansGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreatePlanRequest} [createPlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlansPost(
      createPlanRequest?: CreatePlanRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreatePlanResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlansPost(
        createPlanRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlansApi.apiPlansPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdatePlanRequest} [updatePlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlansPut(
      updatePlanRequest?: UpdatePlanRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdatePlanResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlansPut(
        updatePlanRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlansApi.apiPlansPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PlansApi - factory interface
 * @export
 */
export const PlansApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PlansApiFp(configuration);
  return {
    /**
     *
     * @param {number} athleteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansAthleteAthleteIdGet(
      athleteId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PlanDTO> {
      return localVarFp
        .apiPlansAthleteAthleteIdGet(athleteId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [pageSize]
     * @param {number} [lastId]
     * @param {string} [direction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansGet(
      pageSize?: number,
      lastId?: number,
      direction?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PlanDTO> {
      return localVarFp
        .apiPlansGet(pageSize, lastId, direction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreatePlanRequest} [createPlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansPost(
      createPlanRequest?: CreatePlanRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreatePlanResponse> {
      return localVarFp
        .apiPlansPost(createPlanRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdatePlanRequest} [updatePlanRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlansPut(
      updatePlanRequest?: UpdatePlanRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdatePlanResponse> {
      return localVarFp
        .apiPlansPut(updatePlanRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PlansApi - object-oriented interface
 * @export
 * @class PlansApi
 * @extends {BaseAPI}
 */
export class PlansApi extends BaseAPI {
  /**
   *
   * @param {number} athleteId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlansApi
   */
  public apiPlansAthleteAthleteIdGet(
    athleteId: number,
    options?: RawAxiosRequestConfig
  ) {
    return PlansApiFp(this.configuration)
      .apiPlansAthleteAthleteIdGet(athleteId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [pageSize]
   * @param {number} [lastId]
   * @param {string} [direction]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlansApi
   */
  public apiPlansGet(
    pageSize?: number,
    lastId?: number,
    direction?: string,
    options?: RawAxiosRequestConfig
  ) {
    return PlansApiFp(this.configuration)
      .apiPlansGet(pageSize, lastId, direction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreatePlanRequest} [createPlanRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlansApi
   */
  public apiPlansPost(
    createPlanRequest?: CreatePlanRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PlansApiFp(this.configuration)
      .apiPlansPost(createPlanRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdatePlanRequest} [updatePlanRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlansApi
   */
  public apiPlansPut(
    updatePlanRequest?: UpdatePlanRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PlansApiFp(this.configuration)
      .apiPlansPut(updatePlanRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {DeleteSocialMediaRequest} [deleteSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsIdSocialMediaDelete: async (
      id: number,
      deleteSocialMediaRequest?: DeleteSocialMediaRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiTeamsIdSocialMediaDelete', 'id', id);
      const localVarPath = `/api/Teams/{Id}/social-media`.replace(
        `{${'Id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteSocialMediaRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {SaveSocialMediaRequest} [saveSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsIdSocialMediaPost: async (
      id: number,
      saveSocialMediaRequest?: SaveSocialMediaRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiTeamsIdSocialMediaPost', 'id', id);
      const localVarPath = `/api/Teams/{Id}/social-media`.replace(
        `{${'Id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveSocialMediaRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateTeamRequest} [createTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsPost: async (
      createTeamRequest?: CreateTeamRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTeamRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateTeamRequest} [updateTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsPut: async (
      updateTeamRequest?: UpdateTeamRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTeamRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsTeamIdGet: async (
      teamId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists('apiTeamsTeamIdGet', 'teamId', teamId);
      const localVarPath = `/api/Teams/{teamId}`.replace(
        `{${'teamId'}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} teamId
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsTeamIdSettingsPost: async (
      teamId: number,
      requestBody?: { [key: string]: string },
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists('apiTeamsTeamIdSettingsPost', 'teamId', teamId);
      const localVarPath = `/api/Teams/{teamId}/settings`.replace(
        `{${'teamId'}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {DeleteSocialMediaRequest} [deleteSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsIdSocialMediaDelete(
      id: number,
      deleteSocialMediaRequest?: DeleteSocialMediaRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DeleteTeamSocialMediaResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTeamsIdSocialMediaDelete(
          id,
          deleteSocialMediaRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsIdSocialMediaDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {SaveSocialMediaRequest} [saveSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsIdSocialMediaPost(
      id: number,
      saveSocialMediaRequest?: SaveSocialMediaRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SaveTeamSocialMediaResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTeamsIdSocialMediaPost(
          id,
          saveSocialMediaRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsIdSocialMediaPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateTeamRequest} [createTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsPost(
      createTeamRequest?: CreateTeamRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateTeamResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsPost(
        createTeamRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateTeamRequest} [updateTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsPut(
      updateTeamRequest?: UpdateTeamRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateTeamResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsPut(
        updateTeamRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsTeamIdGet(
      teamId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTeamsTeamIdGet(teamId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsTeamIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} teamId
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTeamsTeamIdSettingsPost(
      teamId: number,
      requestBody?: { [key: string]: string },
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SaveTeamSettingsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTeamsTeamIdSettingsPost(
          teamId,
          requestBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TeamsApi.apiTeamsTeamIdSettingsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TeamsApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {DeleteSocialMediaRequest} [deleteSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsIdSocialMediaDelete(
      id: number,
      deleteSocialMediaRequest?: DeleteSocialMediaRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DeleteTeamSocialMediaResponse> {
      return localVarFp
        .apiTeamsIdSocialMediaDelete(id, deleteSocialMediaRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {SaveSocialMediaRequest} [saveSocialMediaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsIdSocialMediaPost(
      id: number,
      saveSocialMediaRequest?: SaveSocialMediaRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SaveTeamSocialMediaResponse> {
      return localVarFp
        .apiTeamsIdSocialMediaPost(id, saveSocialMediaRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateTeamRequest} [createTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsPost(
      createTeamRequest?: CreateTeamRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateTeamResponse> {
      return localVarFp
        .apiTeamsPost(createTeamRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateTeamRequest} [updateTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsPut(
      updateTeamRequest?: UpdateTeamRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateTeamResponse> {
      return localVarFp
        .apiTeamsPut(updateTeamRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsTeamIdGet(
      teamId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<TeamDTO> {
      return localVarFp
        .apiTeamsTeamIdGet(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} teamId
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeamsTeamIdSettingsPost(
      teamId: number,
      requestBody?: { [key: string]: string },
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SaveTeamSettingsResponse> {
      return localVarFp
        .apiTeamsTeamIdSettingsPost(teamId, requestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {DeleteSocialMediaRequest} [deleteSocialMediaRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsIdSocialMediaDelete(
    id: number,
    deleteSocialMediaRequest?: DeleteSocialMediaRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TeamsApiFp(this.configuration)
      .apiTeamsIdSocialMediaDelete(id, deleteSocialMediaRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {SaveSocialMediaRequest} [saveSocialMediaRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsIdSocialMediaPost(
    id: number,
    saveSocialMediaRequest?: SaveSocialMediaRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TeamsApiFp(this.configuration)
      .apiTeamsIdSocialMediaPost(id, saveSocialMediaRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateTeamRequest} [createTeamRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsPost(
    createTeamRequest?: CreateTeamRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TeamsApiFp(this.configuration)
      .apiTeamsPost(createTeamRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateTeamRequest} [updateTeamRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsPut(
    updateTeamRequest?: UpdateTeamRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TeamsApiFp(this.configuration)
      .apiTeamsPut(updateTeamRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} teamId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsTeamIdGet(teamId: number, options?: RawAxiosRequestConfig) {
    return TeamsApiFp(this.configuration)
      .apiTeamsTeamIdGet(teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} teamId
   * @param {{ [key: string]: string; }} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public apiTeamsTeamIdSettingsPost(
    teamId: number,
    requestBody?: { [key: string]: string },
    options?: RawAxiosRequestConfig
  ) {
    return TeamsApiFp(this.configuration)
      .apiTeamsTeamIdSettingsPost(teamId, requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WorkoutsApi - axios parameter creator
 * @export
 */
export const WorkoutsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiWorkoutsIdGet', 'id', id);
      const localVarPath = `/api/Workouts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateWorkoutRequest} [createWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsPost: async (
      createWorkoutRequest?: CreateWorkoutRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Workouts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createWorkoutRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateWorkoutRequest} [updateWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsPut: async (
      updateWorkoutRequest?: UpdateWorkoutRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Workouts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateWorkoutRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsCommentIdDelete: async (
      workoutId: number,
      commentId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workoutId' is not null or undefined
      assertParamExists(
        'apiWorkoutsWorkoutIdCommentsCommentIdDelete',
        'workoutId',
        workoutId
      );
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists(
        'apiWorkoutsWorkoutIdCommentsCommentIdDelete',
        'commentId',
        commentId
      );
      const localVarPath = `/api/Workouts/{workoutId}/comments/{commentId}`
        .replace(`{${'workoutId'}}`, encodeURIComponent(String(workoutId)))
        .replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {UpdateCommentRequest} [updateCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsCommentIdPut: async (
      workoutId: number,
      commentId: number,
      updateCommentRequest?: UpdateCommentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workoutId' is not null or undefined
      assertParamExists(
        'apiWorkoutsWorkoutIdCommentsCommentIdPut',
        'workoutId',
        workoutId
      );
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists(
        'apiWorkoutsWorkoutIdCommentsCommentIdPut',
        'commentId',
        commentId
      );
      const localVarPath = `/api/Workouts/{workoutId}/comments/{commentId}`
        .replace(`{${'workoutId'}}`, encodeURIComponent(String(workoutId)))
        .replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCommentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} workoutId
     * @param {CreateWorkoutCommentRequest} [createWorkoutCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsPost: async (
      workoutId: number,
      createWorkoutCommentRequest?: CreateWorkoutCommentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'workoutId' is not null or undefined
      assertParamExists(
        'apiWorkoutsWorkoutIdCommentsPost',
        'workoutId',
        workoutId
      );
      const localVarPath = `/api/Workouts/{workoutId}/comments`.replace(
        `{${'workoutId'}}`,
        encodeURIComponent(String(workoutId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createWorkoutCommentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WorkoutsApi - functional programming interface
 * @export
 */
export const WorkoutsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WorkoutsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWorkoutsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['WorkoutsApi.apiWorkoutsIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateWorkoutRequest} [createWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsPost(
      createWorkoutRequest?: CreateWorkoutRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateWorkoutResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkoutsPost(
        createWorkoutRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['WorkoutsApi.apiWorkoutsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateWorkoutRequest} [updateWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsPut(
      updateWorkoutRequest?: UpdateWorkoutRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateWorkoutResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkoutsPut(
        updateWorkoutRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['WorkoutsApi.apiWorkoutsPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsWorkoutIdCommentsCommentIdDelete(
      workoutId: number,
      commentId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWorkoutsWorkoutIdCommentsCommentIdDelete(
          workoutId,
          commentId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'WorkoutsApi.apiWorkoutsWorkoutIdCommentsCommentIdDelete'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {UpdateCommentRequest} [updateCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsWorkoutIdCommentsCommentIdPut(
      workoutId: number,
      commentId: number,
      updateCommentRequest?: UpdateCommentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWorkoutsWorkoutIdCommentsCommentIdPut(
          workoutId,
          commentId,
          updateCommentRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'WorkoutsApi.apiWorkoutsWorkoutIdCommentsCommentIdPut'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} workoutId
     * @param {CreateWorkoutCommentRequest} [createWorkoutCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWorkoutsWorkoutIdCommentsPost(
      workoutId: number,
      createWorkoutCommentRequest?: CreateWorkoutCommentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWorkoutsWorkoutIdCommentsPost(
          workoutId,
          createWorkoutCommentRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['WorkoutsApi.apiWorkoutsWorkoutIdCommentsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WorkoutsApi - factory interface
 * @export
 */
export const WorkoutsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WorkoutsApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<WorkoutDTO> {
      return localVarFp
        .apiWorkoutsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateWorkoutRequest} [createWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsPost(
      createWorkoutRequest?: CreateWorkoutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateWorkoutResponse> {
      return localVarFp
        .apiWorkoutsPost(createWorkoutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateWorkoutRequest} [updateWorkoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsPut(
      updateWorkoutRequest?: UpdateWorkoutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateWorkoutResponse> {
      return localVarFp
        .apiWorkoutsPut(updateWorkoutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsCommentIdDelete(
      workoutId: number,
      commentId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWorkoutsWorkoutIdCommentsCommentIdDelete(
          workoutId,
          commentId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} workoutId
     * @param {number} commentId
     * @param {UpdateCommentRequest} [updateCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsCommentIdPut(
      workoutId: number,
      commentId: number,
      updateCommentRequest?: UpdateCommentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWorkoutsWorkoutIdCommentsCommentIdPut(
          workoutId,
          commentId,
          updateCommentRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} workoutId
     * @param {CreateWorkoutCommentRequest} [createWorkoutCommentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWorkoutsWorkoutIdCommentsPost(
      workoutId: number,
      createWorkoutCommentRequest?: CreateWorkoutCommentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiWorkoutsWorkoutIdCommentsPost(
          workoutId,
          createWorkoutCommentRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WorkoutsApi - object-oriented interface
 * @export
 * @class WorkoutsApi
 * @extends {BaseAPI}
 */
export class WorkoutsApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateWorkoutRequest} [createWorkoutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsPost(
    createWorkoutRequest?: CreateWorkoutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsPost(createWorkoutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateWorkoutRequest} [updateWorkoutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsPut(
    updateWorkoutRequest?: UpdateWorkoutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsPut(updateWorkoutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} workoutId
   * @param {number} commentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsWorkoutIdCommentsCommentIdDelete(
    workoutId: number,
    commentId: number,
    options?: RawAxiosRequestConfig
  ) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsWorkoutIdCommentsCommentIdDelete(
        workoutId,
        commentId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} workoutId
   * @param {number} commentId
   * @param {UpdateCommentRequest} [updateCommentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsWorkoutIdCommentsCommentIdPut(
    workoutId: number,
    commentId: number,
    updateCommentRequest?: UpdateCommentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsWorkoutIdCommentsCommentIdPut(
        workoutId,
        commentId,
        updateCommentRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} workoutId
   * @param {CreateWorkoutCommentRequest} [createWorkoutCommentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkoutsApi
   */
  public apiWorkoutsWorkoutIdCommentsPost(
    workoutId: number,
    createWorkoutCommentRequest?: CreateWorkoutCommentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return WorkoutsApiFp(this.configuration)
      .apiWorkoutsWorkoutIdCommentsPost(
        workoutId,
        createWorkoutCommentRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
