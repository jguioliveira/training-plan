@page "/login"
@layout TrainingPlan.App.Client.Layout.EmptyLayout
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using System.Text.Json
@using System.Net.Http.Headers

@inject AuthenticationStateProvider _authStateProvider
@inject TraningPlanUserService _loginService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager


<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Width="100%" Square="true">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard Class="">
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                    @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" Class="mt-3"
                                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudCheckBox Label="Remember me" @bind-Value="model.RememberMe"></MudCheckBox>
                </MudCardContent>
                <MudCardActions Class="">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
                @if (!success)
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudCard>
        </EditForm>
    </MudPaper>
</MudContainer>



@code {
    LoginForm model = new LoginForm();
    bool success;

    public class LoginForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        public bool RememberMe { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {

        var principal = new ClaimsPrincipal();
        var token = await _loginService.SendAuthenticateRequestAsync(model.Email, model.Password);

        await _localStorage.SetItemAsync("token", token);
        await _authStateProvider.GetAuthenticationStateAsync();

        _navigationManager.NavigateTo($"Management/");
    }

    

    

}


